/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general-purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6.4/samples
 */
import java.net.InetAddress
import java.net.URI
import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse
import java.net.HttpURLConnection
import java.net.URL
import java.io.OutputStream


plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.hc.client5:httpclient5:5.0.4'
}

task startDockerComposeProd(type: Exec) {
        commandLine 'docker-compose', '-f', 'js-app/docker-compose.yml', '-f', 'js-app/docker-compose.prod.yml', 'up', '-d', '--build'
        def SESSION_SECRET = project.findProperty('SESSION_SECRET')
        def MONGO_USER = project.hasProperty('MONGO_USER') ? project.property('MONGO_USER') : "defaultMongoUser"
        def MONGO_PASSWORD = project.hasProperty('MONGO_PASSWORD') ? project.property('MONGO_PASSWORD') : "defaultMongoPassword"
        def MONGO_INITDB_ROOT_USERNAME = project.hasProperty('MONGO_INITDB_ROOT_USERNAME') ? project.property('MONGO_INITDB_ROOT_USERNAME') : "defaultRootUser"
        def MONGO_INITDB_ROOT_PASSWORD = project.hasProperty('MONGO_INITDB_ROOT_PASSWORD') ? project.property('MONGO_INITDB_ROOT_PASSWORD') : "defaultRootPassword"
        environment "MONGO_USER", MONGO_USER
        environment "MONGO_PASSWORD", MONGO_PASSWORD
        println("MONGO_USER: ${MONGO_USER}")
        println("MONGO_PASSWORD: ${MONGO_PASSWORD}")
        println("MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}")
        println("MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}")
}

task startDockerComposeDev(type: Exec) {
        commandLine 'docker-compose', '-f', 'js-app/docker-compose.yml', '-f', 'js-app/docker-compose.dev.yml', 'up', '-d', '--build'
        def SESSION_SECRET = project.findProperty('SESSION_SECRET')
        def MONGO_USER = project.hasProperty('MONGO_USER') ? project.property('MONGO_USER') : "defaultMongoUser"
        def MONGO_PASSWORD = project.hasProperty('MONGO_PASSWORD') ? project.property('MONGO_PASSWORD') : "defaultMongoPassword"
        def MONGO_INITDB_ROOT_USERNAME = project.hasProperty('MONGO_INITDB_ROOT_USERNAME') ? project.property('MONGO_INITDB_ROOT_USERNAME') : "defaultRootUser"
        def MONGO_INITDB_ROOT_PASSWORD = project.hasProperty('MONGO_INITDB_ROOT_PASSWORD') ? project.property('MONGO_INITDB_ROOT_PASSWORD') : "defaultRootPassword"
        environment "MONGO_USER", MONGO_USER
        environment "MONGO_PASSWORD", MONGO_PASSWORD
        println("MONGO_USER: ${MONGO_USER}")
        println("MONGO_PASSWORD: ${MONGO_PASSWORD}")
        println("MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}")
        println("MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}")
}

task nodeChecker {
    doLast {
        def NODE_ENV = project.hasProperty('NODE_ENV') ? project.property('NODE_ENV') : "defaultNodeEnv"
        println("NODE_ENV is set to ${NODE_ENV}")
        if (NODE_ENV == 'production') {
            println("NODE_ENV is set to ${NODE_ENV}. Executing startDockerComposeProd task...")
            startDockerComposeProd.exec()
        } else if (NODE_ENV == 'development') {
            println("NODE_ENV is set to ${NODE_ENV}. Executing startDockerComposeDev task...")
            startDockerComposeDev.exec()
        }
    }
}


def docker_swarm = project.findProperty('DOCKER_SWARM?')

if (docker_swarm == true) {
    task startDockerSwarm(type: Exec) {
        commandLine 'docker-compose', '-f', 'js-app/docker-compose.yml', '-f', 'js-app/docker-compose.prod.swarm.yml', 'up', '-d','--build'
        def NODE_ENV = project.findProperty('NODE_ENV')
        def SESSION_SECRET = project.findProperty('SESSION_SECRET')
        def MONGO_USER = project.hasProperty('MONGO_USER') ? project.property('MONGO_USER') : "defaultMongoUser"
        def MONGO_PASSWORD = project.hasProperty('MONGO_PASSWORD') ? project.property('MONGO_PASSWORD') : "defaultMongoPassword"
        def MONGO_INITDB_ROOT_USERNAME = project.hasProperty('MONGO_INITDB_ROOT_USERNAME') ? project.property('MONGO_INITDB_ROOT_USERNAME') : "defaultRootUser"
        def MONGO_INITDB_ROOT_PASSWORD = project.hasProperty('MONGO_INITDB_ROOT_PASSWORD') ? project.property('MONGO_INITDB_ROOT_PASSWORD') : "defaultRootPassword"
        //environment "MONGO_INITDB_ROOT_USERNAME", MONGO_INITDB_ROOT_USERNAME
        environment "MONGO_USER", MONGO_USER
        environment "MONGO_PASSWORD", MONGO_PASSWORD
        // Print the values for debugging
        println("MONGO_USER: ${MONGO_USER}")
        println("MONGO_PASSWORD: ${MONGO_PASSWORD}")
        //environment "MONGO_INITDB_ROOT_PASSWORD", MONGO_INITDB_ROOT_PASSWORD
        println("MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}")
        println("MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}")
    }
}




def sendHttpRequest(String urlString, String payload, String successMessage) {
    HttpURLConnection connection = (HttpURLConnection) new URL(urlString).openConnection()
    connection.requestMethod = "POST"
    connection.doOutput = true
    connection.setRequestProperty("Content-Type", "application/json")

    try (OutputStream os = connection.outputStream) {
        byte[] input = payload.getBytes("utf-8")
        os.write(input, 0, input.length)
    }

    int responseCode = connection.responseCode
    println("HTTP Status Code: ${responseCode}")

    // Check for successful response codes (200, 201, etc.)
    if (responseCode >= 200 && responseCode < 300) {
        println("✅ API POST Request is successful! - ${successMessage}")
    } else {
        println("❌ API POST Request failed with status code: ${responseCode}")

        // Print additional details for 400 errors
        if (responseCode == 400) {
            println("Response Message: ${connection.responseMessage}")
            println("Response Content: ${connection.inputStream.text}")
        }
    }
}

task makeHttpGetRequest {
    doLast {
        def app_ip = System.getenv('APP_IP')
        def url = "http://${app_ip}/api/v1"
        println("${app_ip}")
        println("${url}")
        //def APP_IP = project.findProperty('APP_IP')
        // def serverIP = InetAddress.localHost.hostAddress
        def client = HttpClient.newHttpClient()
        def request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .GET()
                .build()
        try {
            sleep(2000)
            def response = client.send(request, HttpResponse.BodyHandlers.ofString())
            println("HTTP Status Code: ${response.statusCode()}")
            println("Response Body:\n${response.body()}")

            if (response.statusCode() == 200) {
                println("✅ API GET Request is successful!")
            } else {
                println("❌ API GET Request failed with status code: ${response.statusCode()}")
            }
        } catch (Exception e) {
            println("❌ Exception during GET request: ${e.message}")
        }
    }
}

task makeHttpSignUpRequest {
    doLast {
        //def username = project.findProperty('USERNAME')
        //def password = project.findProperty('PASSWORD')
        def username = System.getenv('USERNAME')
        def password = System.getenv('PASSWORD')
        def app_ip = System.getenv('APP_IP')
        println("${app_ip}")
        def postSignupUrl = "http://${app_ip}/api/v1/users/signup"
        println("${postSignupUrl}")
        def signupPayload = "{\"username\": \"$username\", \"password\": \"$password\"}"
        println("${signupPayload}")
        sendHttpRequest(postSignupUrl, signupPayload, "User Created")
    }
}

task makeHttpLoginRequest {
    doLast {
        //def username = project.findProperty('USERNAME')
        //def password = project.findProperty('PASSWORD')
        def username = System.getenv('USERNAME')
        def password = System.getenv('PASSWORD')
        def app_ip = System.getenv('APP_IP')
        def postLoginUrl = "http://${app_ip}/api/v1/users/login"
        def loginPayload = "{\"username\": \"$username\", \"password\": \"$password\"}"
        sendHttpRequest(postLoginUrl, loginPayload, "User Logged In")
    }
}

task makeHttpPostRequestForUserPosts {
    doLast {
        def app_ip = System.getenv('APP_IP')
        def postUserPostsUrl = "http://${app_ip}/api/v1/posts"
        def userPostsPayload = '{"header": "this is the header", "body": "this is the body"}'
        sendHttpRequest(postUserPostsUrl, userPostsPayload, "User Post Created")
    }
}

makeHttpLoginRequest.dependsOn makeHttpSignUpRequest
startDockerComposeProd.dependsOn nodeChecker
startDockerComposeDev.dependsOn nodeChecker
